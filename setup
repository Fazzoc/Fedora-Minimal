#!/bin/env bash

##### Progerss Bar #####
total_steps=8
current_step=0

display_centered_progress() {
    local message="$1"
    local subtitle="$2"
    local progress="$3"
    local term_width=$(tput cols)
    local term_height=$(tput lines)
    local bar_width=100
    local max_width=$((bar_width + 4))
    local completed=$((progress * bar_width / 100))
    local remaining=$((bar_width - completed))
    
    local progress_bar=$(printf "\033[42m%*s\033[0m%*s" "$completed" "" "$remaining" "")
    local message_with_subtitle="$message${subtitle:+ ($subtitle)}"
    local message_with_percentage="[$progress%] $message_with_subtitle"
    local truncated_message=$(echo "$message_with_percentage" | cut -c 1-$bar_width)
    local start_row=$(( (term_height - 4) / 2 ))
    
    printf "\033[2J"
    printf "\033[%d;%dH\033[34m╭%s╮\033[0m" "$start_row" $(( (term_width - max_width) / 2 )) "$(printf "%0.s─" $(seq 1 $((max_width - 2))))"
    printf "\033[%d;%dH\033[34m│\033[0m %*s%s%*s \033[34m│\033[0m" "$((start_row + 1))" $(( (term_width - max_width) / 2 )) $(( (bar_width - ${#truncated_message}) / 2 )) "" "$truncated_message" $(( (bar_width - ${#truncated_message} + 1) / 2 )) ""
    printf "\033[%d;%dH\033[34m│\033[0m %s \033[34m│\033[0m" "$((start_row + 2))" $(( (term_width - max_width) / 2 )) "$progress_bar"
    printf "\033[%d;%dH\033[34m╰%s╯\033[0m" "$((start_row + 3))" $(( (term_width - max_width) / 2 )) "$(printf "%0.s─" $(seq 1 $((max_width - 2))))"
    printf "\033[%d;0H" "$((start_row + 5))"
}

progress_update() {
    current_step=$((current_step + 1))
    progress=$((current_step * 100 / total_steps))
    
    current_stage="${1:-$current_stage}"
    subtitle="$2"
    
    [ "$3" != "no_display" ] && display_centered_progress "$current_stage" "$subtitle" $progress
}

show_prompt() {
    printf "\033[2J\033[0;0H"
    read -p "$1" response
    progress_update "$current_stage"
    echo "$response"
}

#### Package Lists ####
base_packages=(
  "kernel-cachyos"
  "uksmd"
  "@Fonts"
  "amd-gpu-firmware"
  "mt7xxx-firmware"
  "realtek-firmware"
  "dnfdragora"
  "bluedevil"
  "breeze-icon-theme"
  "colord-kde"
  "cups-pk-helper"
  "dolphin"
  "glibc-all-langpacks"
  "gnome-keyring-pam"
  "kcm_systemd"
  "kde-gtk-config"
  "kde-settings-pulseaudio"
  "kdegraphics-thumbnailers"
  "kdeplasma-addons"
  "kdialog"
  "kdnssd"
  "kf5-kipi-plugins"
  "kf6-baloo-file"
  "kmenuedit"
  "kitty"
  "kscreen"
  "kscreenlocker"
  "ksshaskpass"
  "kwin"
  "kinfocenter"
  "krita"
  "NetworkManager-config-connectivity-fedora"
  "phonon-qt5-backend-gstreamer"
  "pinentry-qt"
  "plasma-breeze"
  "plasma-desktop"
  "plasma-discover"
  "plasma-nm"
  "plasma-pa"
  "plasma-user-manager"
  "plasma-workspace"
  "plasma-workspace-geolocation"
  "plymouth-theme-breeze"
  "polkit-kde"
  "qt5-qtbase-gui"
  "qt5-qtdeclarative"
  "sddm"
  "sddm-breeze"
  "sddm-kcm"
  "ark"  
  "git"
  "fastfetch"
  "tar"
  "vlc"
  "okular"
  "bleachbit"
  "gnome-disk-utility"
  "util-linux-user"
  "steam"
  "wget"
  "./OpenTabletDriver.rpm"
)

device_packages=(
  [desktop]="plasma-systemmonitor timeshift konsole-part kde-print-manager"
  [laptop]="htop"
)

grub_conf=(
  "GRUB_TIMEOUT=1"
  "GRUB_TIMEOUT_STYLE=hidden"
  "GRUB_DISTRIBUTOR=\"\$(sed 's, release .*$,,g' /etc/system-release)\""
  "GRUB_DEFAULT=saved"
  "GRUB_DISABLE_SUBMENU=true"
  "GRUB_CMDLINE_LINUX=\"rhgb quiet loglevel=3 mitigations=off nowatchdog processor.ignore_ppc=1 split_lock_detect=off amdgpu.ppfeaturemask=0xfffd7fff\""
  "GRUB_DISABLE_RECOVERY=true"
  "GRUB_ENABLE_BLSCFG=true"
)

clean=("setup" "OpenTabletDriver.rpm")

##### CHECK FOR SUDO or ROOT #####
if [[ $EUID != 0 ]]; then
  echo "This script must be run as sudo or root, try again..."
  exit 1
fi

while true; do
read -p "Hey! To begin this setup, select your desired device - (D)esktop|(l)aptop:" choice
    choice=${choice:-d}
    case "${choice,,}" in
        d) device_type="desktop" ;;
        l) device_type="laptop" ;;
        *) echo "Invalid input. Please try again.";;
    esac
    printf "Thank you. The rest of the setup will remember your device!"
    break
done

##### PACKAGE SETUP #####
progress_update "Stage 1 - Package setup" "Installing base packages..."
{
  curl -sLO https://github.com/OpenTabletDriver/OpenTabletDriver/releases/latest/download/OpenTabletDriver.rpm
  dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm -y
  dnf config-manager --enable fedora-cisco-openh264 -y
  dnf copr enable bieszczaders/kernel-cachyos -y
  dnf copr enable bieszczaders/kernel-cachyos-addons -y
  dnf install "${base_packages[@]}" -y

  flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
  flatpak install io.gitlab.librewolf-community org.onlyoffice.desktopeditors -y
} > /dev/null 2>&1

progress_update "" "Installing device packages..."
dnf install ${device_packages[$device_type]} -y > /dev/null 2>&1

progress_update "" "Updating packages..."
dnf update -y > /dev/null 2>&1

progress_update "" "Removing unsued packages..."
{
  dnf autoremove -y
  dnf erase plasma-welcome audiocd-kio -y
  rpm -e --nodeps maliit-keyboard
} > /dev/null 2>&1

##### SYSTEM SETUP #####
progress_update "Stage 2 - Configuring system"
{
  plymouth-set-default-theme breeze -R
  setsebool -P domain_kernel_load_modules on

  printf '%s\n' "${grub_conf[@]}" > /etc/default/grub
  grub2-mkconfig -o /boot/grub2/grub.cfg
}

progress_update "" "Configuring Services..."
{
  systemctl enable sddm uksmd.service
  systemctl set-default graphical.target
  systemctl disable NetworkManager-wait-online.service 
  dracut --regenerate-all --force

  # printf "Note: The command (systemctl --user enable opentabletdriver.service --now) will need to be run as user to enable the OpenTabletDriver service. please do so after your reboot." #
} > /dev/null 2>&1

progress_update "" "Configuring Software..."
{
  sleep 3
  ##### The lines below will be used to download and copy config files to the user's home directory. #####
  # cp -r Configs/Main/ $HOME/ > /dev/null 2>&1 #
  # cp -r Configs/$device_type/ $HOME/ > /dev/null 2>&1 #
} > /dev/null 2>&1

progress_update  "Setup Complete! Please reboot for all changes to take effect."
while true; do
  read -p "Would you like to reboot now? (Y|n):" reboot_choice
  reboot_choice=${reboot_choice:-y}
    case "${reboot_choice,,}" in
        y) rm "${clean[@]}"
           reboot ;;
        n) rm "${clean[@]}"
           echo "Reboot cancelled. Please remember to reboot your system later."
           break ;;
        *) echo "Invalid input. Please try again." ;;
    esac
done